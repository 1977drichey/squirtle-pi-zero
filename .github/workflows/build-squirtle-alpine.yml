# .github/workflows/build-squirtle-alpine.yml
name: Build Squirtle Alpine Streaming OS

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name (optional)'
        required: false
        default: ''

env:
  IMAGE_NAME: squirtle-alpine-streamer
  ALPINE_VERSION: "3.19"
  ALPINE_ARCH: "armhf"
  GO2RTC_VERSION: "1.8.4"

jobs:
  build-squirtle-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo apt-get remove -y '^dotnet-.*' '^llvm-.*' '^php.*' azure-cli google-cloud-cli || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          df -h

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget \
            xz-utils \
            bc \
            parted \
            kpartx \
            zip \
            qemu-user-static \
            binfmt-support \
            dosfstools \
            e2fsprogs \
            debootstrap

          sudo update-binfmts --enable qemu-arm

      - name: Download Alpine rootfs and go2rtc
        run: |
          echo "📥 Downloading Alpine Linux $ALPINE_VERSION for $ALPINE_ARCH..."
          ALPINE_URL="https://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION}/releases/${ALPINE_ARCH}/alpine-minirootfs-${ALPINE_VERSION}.0-${ALPINE_ARCH}.tar.gz"
          wget -O alpine-rootfs.tar.gz "$ALPINE_URL"

          echo "📥 Downloading go2rtc for ARM..."
          GO2RTC_URL="https://github.com/AlexxIT/go2rtc/releases/download/v${GO2RTC_VERSION}/go2rtc_linux_arm"
          wget -O go2rtc_arm "$GO2RTC_URL"
          chmod +x go2rtc_arm

          echo "✅ Downloaded Alpine and go2rtc components"
          ls -lh alpine-rootfs.tar.gz go2rtc_arm

      # ... [All your other steps remain unchanged] ...

      - name: Compress Squirtle image
        run: |
          echo "🗜️ Compressing Squirtle image..."
          xz -9 -T 0 "${IMAGE_NAME}.img"
          sha256sum "${IMAGE_NAME}.img.xz" > "${IMAGE_NAME}.img.xz.sha256"
          echo "IMAGE_FILE=${IMAGE_NAME}.img.xz" >> $GITHUB_ENV
          echo "CHECKSUM_FILE=${IMAGE_NAME}.img.xz.sha256" >> $GITHUB_ENV

      - name: Create build info
        run: |
          cat > squirtle-build-info.txt <<BUILD_INFO
[... your build info block ...]
BUILD_INFO

      - name: Upload Squirtle build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: squirtle-streaming-image
          path: |
            ${{ env.IMAGE_FILE }}
            ${{ env.CHECKSUM_FILE }}
            squirtle-build-info.txt
          retention-days: 30

      - name: Create Squirtle GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: 🐢 Squirtle Alpine Streamer v${{ github.ref_name }}
          body: |
            ## 🐢 Squirtle Alpine Streaming OS

            **Ultra-lightweight go2rtc-powered RTSP streamer for Pi Zero W / Zero 2W**
            [... trimmed for brevity ...]
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.IMAGE_FILE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload checksum to release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.CHECKSUM_FILE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
